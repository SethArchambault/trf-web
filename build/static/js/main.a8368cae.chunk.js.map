{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bp_api","dev","contract","host","chainId","live","clientType","window","TPJSBrigeClient","navigator","userAgent","includes","match","accessContext","initAccessContext","appName","network","port","protocol","walletProviders","scatter","tokenpocket","lynxWalletProvider","getWalletProviders","console","log","App","status","useSelector","state","dispatch","useDispatch","Status","selectWalletProvider","idx","a","walletProvider","wallet","initWallet","type","payload","connect","discover","pathIndexList","discoveryData","accountInfo","keyToAccountMap","length","keyObj","accountName","accounts","account","authorization","login","Error","username","auth","eosApi","transact","actions","name","actor","permission","data","user","broadcast","blocksBehind","expireSeconds","alert","renderWalletProviders","map","meta","className","onClick","key","renderLoginBox","introText","href","style","maxWidth","flexGrow","paddingRight","paddingTop","id","src","display","flexDirection","backgroundColor","padding","maxHeight","borderBottomRightRadius","borderBottomLeftRadius","letterSpacing","fontWeight","fontSize","textDecoration","target","margin","alignItems","alignContent","Boolean","location","hostname","reducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8368cae.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport './App.css';\n\n/* accessContent + walletProviders*/\nimport { initAccessContext } from 'eos-transit';\nimport scatter from 'eos-transit-scatter-provider';\nimport tokenpocket from 'eos-transit-tokenpocket-provider';\nimport lynxWalletProvider from 'eos-transit-lynx-provider';\n\n\nconst bp_api = {\n    dev: {\n        contract: 'wigglewiggle',\n        host: 'jungle2.cryptolions.io',\n        chainId: 'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473'\n    },\n    live: {\n        contract: 'travelrefund',\n        host: 'eos.greymass.com',\n        chainId: 'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906'\n    }\n}\nconst env = 'live'\n\n// see if browser is open\nlet clientType = null\nif (window.TPJSBrigeClient) {\n     clientType = 'TokenPocket'\n}\nelse if (navigator.userAgent.includes(\"EOSLynx\")){\n     clientType = 'EOS Lynx'\n}\nelse if (!!navigator.userAgent.match(/Android|iPhone|iPad|iPod/i)){\n\tclientType = \"mobile_browser\" \n}\nelse {\n\tclientType = \"desktop_browser\" \n}\n\n\nconst accessContext = initAccessContext({\n\tappName: 'trf-web',\n\tnetwork: {\n\t\thost: bp_api[env].host,\n\t\tport: 443,\n\t\tprotocol: 'https',\n\t\tchainId: bp_api[env].chainId,\n\t},\n\twalletProviders: [\n\t\tscatter(),\n        tokenpocket(),\n        lynxWalletProvider()\n\n\t]\n});\nconst walletProviders = accessContext.getWalletProviders();\nconsole.log('walletProviders', walletProviders);\n/* /accessContent + walletProviders*/\n\n\nconst App = () => {\n    const status = useSelector((state) =>state.status)\n    const dispatch = useDispatch()\n\tconst Status = () => {\n\t\tconst status = useSelector((state) =>state.status)\n\t\tconst dispatch = useDispatch()\n\t\treturn (<div>{status}</div>)\n\t}\n    const selectWalletProvider =  async (idx) => {\n        try { \n            const walletProvider = walletProviders[idx];\n            const wallet = accessContext.initWallet(walletProvider);\n            dispatch({type:'switch', payload: 'wallet initialized'})\n            let connect_response = await wallet.connect()\n            dispatch({type:'switch', payload: 'connected'})\n            const discoveryData = await wallet.discover({ pathIndexList: [ 0,1,2,3 ] })\n            let accountInfo = null\n            if (discoveryData.keyToAccountMap.length > 0) {\n                dispatch({type:'switch', payload:'discovery_completed'})\n                // @todo(seth): should allow selection\n                const index = 0;\n                const keyObj = discoveryData.keyToAccountMap[index];\n                const accountName = keyObj.accounts[0].account;\n                const authorization = keyObj.accounts[0].authorization;\n                accountInfo = wallet.login(accountName, authorization)\n            } \n            else { // discovery not supported (scatter for example)\n                dispatch({type:'switch', payload:'logging in'})\n                accountInfo = await wallet.login()\n            }\n            // logged in\n            if (!accountInfo) throw Error(\"Not logged in\")\n            let username = wallet.auth.accountName\n\n            dispatch({type:'switch', payload:'submitting to blockchain.'})\n            let wallet_result = await wallet.eosApi.transact({\n                actions: [{\n                      account: bp_api[env].contract ,\n                      name: 'create',\n                      authorization: [{\n                                    actor: username,\n                                    permission: \"active\",/*wallet.auth.permission,*/\n                                  }],\n                      data: {user:username},\n                }],\n            }, {\n                    broadcast: true,\n                blocksBehind: 3, expireSeconds: 10});\n            dispatch({type:'switch', payload:'done'})\n        }\n        catch(err) {\n            alert(err)\n                /*\n             if (err instanceof RpcError){\n                 console.log(JSON.stringify(e.json, null, 2));\n             }\n             */\n\n            dispatch({type:'switch', payload:\"error\"})\n            console.log('error', err)\n        }\n    };\n    const renderWalletProviders = walletProviders.map(\n        ({meta}, idx) => (<div className=\"button\" onClick={() => { selectWalletProvider(idx )}} key={idx}>{meta.name}</div>)\n    )\n\tconst onClickApply = () => {\n\t\t// flip through all the different providers\n\t\tfor (var idx = 0; idx < walletProviders.length; ++idx) {\n\t\t\tif (walletProviders[idx].id == clientType) {\n\t\t\t\tselectWalletProvider(idx)\n\t\t\t\treturn \n\t\t\t}\n\t\t}\n\t\tdispatch({type:'switch', payload: 'login_selection'}) \n\t} \n\n    let renderLoginBox = null\n\tlet introText = null\n    if (status == 'intro') {\n\n\t\tif (clientType == \"mobile_browser\") {\n\t\t\tintroText = (\n\t\t\t\t<>\n\t\t\t\t\t<p>Login with TokenPocket or with EOS Lynx</p>\n\t\t\t\t</>)\n\n\t\t} else if (clientType == \"desktop_browser\") {\n\t\t\tintroText = (\n\t\t\t\t<>\n\t\t\t\t\t<p>Login with <a href=\"scatter://open\">Scatter</a>, <a href=\"tokenpocket://open\">Token Pocket</a>.</p>\n\t\t\t\t</>)\n\t\t}\n\t\telse {\n\t\t\tintroText = (\n\t\t\t\t<>\n\t\t\t\t\t<p>I see you're logged in with {clientType}. Great!</p>\n\t\t\t\t</>)\n\t\t}\n\t\t\n        renderLoginBox = (\n\t\t\t<div style={{maxWidth:500, flexGrow:1, paddingRight:10}}> \n                <div>\n\t\t\t\t\t{introText}\n                </div>\n                <div style={{paddingTop:20}}>\n                    <div className=\"button\" onClick={onClickApply}>Login with EOS</div>\n                </div>\n\t\t\t</div>\n        )\n    } else if (status == 'login_selection'){\n        renderLoginBox = (\n\t\t\t<div style={{maxWidth:500, flexGrow:1, paddingRight:10}}> \n\t\t\t\t<>{renderWalletProviders}</>\n\t\t\t</div>\n        )\n    } else if (status == 'done') {\n        renderLoginBox = (\n\t\t\t<div style={{maxWidth:500, flexGrow:1, paddingRight:10}}> \n                <div>\n                  Success! Now find this rob guy, and hand him your travel info.  \n                </div>\n                <div>\n                <img src=\"/img/rob.jpg\" />\n                </div>\n\t\t\t</div>\n        )\n    } else if (status == 'already_signed_up') {\n        renderLoginBox = (\n\t\t\t<div style={{maxWidth:500, flexGrow:1, paddingRight:10}}> \n                <div>\n                  You're already signed up. Now you just need to find this rob guy, and hand him your travel info.  \n                </div>\n                <div>\n                <img src=\"/img/rob.jpg\" />\n                </div>\n\t\t\t</div>\n        )\n    } else if (status == 'error') {\n        renderLoginBox = (\n\t\t\t<div style={{maxWidth:500, flexGrow:1, paddingRight:10}}> \n\t\t\t\t<Status /><p>Hmmm.. Make sure your EOS Wallet app is open!</p>\n\t\t\t\n                    <div className=\"button\" onClick={() => { \n\t\t\t\t\t\tdispatch({type:'switch', payload: 'intro'})\n\t\t\t\t\t}}>Try Again</div>\n\t\t\t</div>\n        )\n\n    } else {\n        renderLoginBox = (\n\t\t\t<div style={{maxWidth:500, flexGrow:1, paddingRight:10}}> \n\t\t\t\t<Status />\n\t\t\t</div>\n        )\n    }\n\treturn (\n    <div style={{display:'flex', flexDirection: 'column'}}> \n        <div style={{display:'flex', flexDirection: 'row', backgroundColor:'#F3F5F9',}}>\n            <div style={{flexGrow:1, padding: '20px 20px',   display:'flex', flexDirection: 'column', flexGrow: 1,  letterSpacing: '1px', fontSize:23, }} > TRAVEL REIMBURSMENT FUND</div>\n            <div style={{ maxHeight:200, borderBottomRightRadius:5, borderBottomLeftRadius: 5, padding: '20px 20px', backgroundColor:'#F3F5F9', letterSpacing: '1px', fontWeight:'bold', fontSize:23}} >\n                <a style={{textDecoration:'none'}} target=\"_blank\" href=\"http://eosdetroit.io\">EOS DETROIT</a>\n            </div>\n        </div>\n    \n        <div style={{ margin:'0 auto', maxWidth:1000, display:'flex', flexDirection: 'row', padding:20, alignItems:'flex-start', alignContent:'flex-start'}}>\n            {renderLoginBox}\n\t\t\t<div style={{flexGrow:0}}> \n\t\t\t\t<div><img src=\"/img/trf_sky.png\" /></div>\n\t\t\t</div>\n\t\t</div>\n    </div>\n\t)\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from \"react-redux\";\nimport {combineReducers, createStore} from 'redux'\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst statusReducer = (status = 'intro', action ) => {\n    switch(action.type) {\n        case \"switch\":\n            return  action.payload;\n        default: \n            return status;\n    }\n}\n\nlet reducers = combineReducers(\n    {\n        \"status\": statusReducer,\n    }\n)\nlet store = createStore(reducers);\n        \nReactDOM.render(\n    (<Provider store={store}>\n        <App />\n    </Provider>), document.getElementById('root'));\n\n//serviceWorker.register();\n\n"],"sourceRoot":""}